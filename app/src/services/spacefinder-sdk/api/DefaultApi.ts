/**
 * Spacefinder-API
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2016-11-27T08:46:09Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {Http, Headers, RequestOptionsArgs, Response, URLSearchParams} from '@angular/http';
import {Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs/Observable';
import * as models from '../model/models';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */

'use strict';

@Injectable()
export class DefaultApi {
    protected basePath = 'https://602h2dvv4h.execute-api.us-east-1.amazonaws.com/development';
    public defaultHeaders : Headers = new Headers();

    constructor(protected http: Http, @Optional() basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    /**
     * 
     * 
     * @param userId 
     * @param booking 
     */
    public bookingsCreate (userId: string, booking: models.Booking, extraHttpRequestParams?: any ) : Observable<models.Booking> {
        const path = this.basePath + '/users/{userId}/bookings'
            .replace('{' + 'userId' + '}', String(userId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling bookingsCreate.');
        }
        // verify required parameter 'booking' is not null or undefined
        if (booking === null || booking === undefined) {
            throw new Error('Required parameter booking was null or undefined when calling bookingsCreate.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(booking);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param userId 
     * @param bookingId 
     */
    public bookingsDelete (userId: string, bookingId: string, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/users/{userId}/bookings/{bookingId}'
            .replace('{' + 'userId' + '}', String(userId))
            .replace('{' + 'bookingId' + '}', String(bookingId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling bookingsDelete.');
        }
        // verify required parameter 'bookingId' is not null or undefined
        if (bookingId === null || bookingId === undefined) {
            throw new Error('Required parameter bookingId was null or undefined when calling bookingsDelete.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param userId 
     * @param bookingId 
     */
    public bookingsGet (userId: string, bookingId: string, extraHttpRequestParams?: any ) : Observable<models.Booking> {
        const path = this.basePath + '/users/{userId}/bookings/{bookingId}'
            .replace('{' + 'userId' + '}', String(userId))
            .replace('{' + 'bookingId' + '}', String(bookingId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling bookingsGet.');
        }
        // verify required parameter 'bookingId' is not null or undefined
        if (bookingId === null || bookingId === undefined) {
            throw new Error('Required parameter bookingId was null or undefined when calling bookingsGet.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param locationId 
     * @param resourceId 
     */
    public bookingsListByResourceId (locationId: string, resourceId: string, extraHttpRequestParams?: any ) : Observable<models.BookingsListResponse> {
        const path = this.basePath + '/locations/{locationId}/resources/{resourceId}/bookings'
            .replace('{' + 'locationId' + '}', String(locationId))
            .replace('{' + 'resourceId' + '}', String(resourceId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'locationId' is not null or undefined
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling bookingsListByResourceId.');
        }
        // verify required parameter 'resourceId' is not null or undefined
        if (resourceId === null || resourceId === undefined) {
            throw new Error('Required parameter resourceId was null or undefined when calling bookingsListByResourceId.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param userId 
     */
    public bookingsListByUserId (userId: string, extraHttpRequestParams?: any ) : Observable<models.BookingsListResponse> {
        const path = this.basePath + '/users/{userId}/bookings'
            .replace('{' + 'userId' + '}', String(userId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling bookingsListByUserId.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param location 
     */
    public locationsCreate (location: models.Location, extraHttpRequestParams?: any ) : Observable<models.Location> {
        const path = this.basePath + '/locations';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'location' is not null or undefined
        if (location === null || location === undefined) {
            throw new Error('Required parameter location was null or undefined when calling locationsCreate.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(location);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param locationId 
     */
    public locationsDelete (locationId: string, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/locations/{locationId}'
            .replace('{' + 'locationId' + '}', String(locationId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'locationId' is not null or undefined
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling locationsDelete.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param locationId 
     */
    public locationsGet (locationId: string, extraHttpRequestParams?: any ) : Observable<models.Location> {
        const path = this.basePath + '/locations/{locationId}'
            .replace('{' + 'locationId' + '}', String(locationId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'locationId' is not null or undefined
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling locationsGet.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     */
    public locationsList (extraHttpRequestParams?: any ) : Observable<models.LocationsListResponse> {
        const path = this.basePath + '/locations';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param locationId 
     */
    public locationsLocationIdOptions (locationId: string, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/locations/{locationId}'
            .replace('{' + 'locationId' + '}', String(locationId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'locationId' is not null or undefined
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling locationsLocationIdOptions.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'OPTIONS',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param locationId 
     */
    public locationsLocationIdResourcesOptions (locationId: string, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/locations/{locationId}/resources'
            .replace('{' + 'locationId' + '}', String(locationId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'locationId' is not null or undefined
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling locationsLocationIdResourcesOptions.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'OPTIONS',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param locationId 
     * @param resourceId 
     */
    public locationsLocationIdResourcesResourceIdBookingsOptions (locationId: string, resourceId: string, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/locations/{locationId}/resources/{resourceId}/bookings'
            .replace('{' + 'locationId' + '}', String(locationId))
            .replace('{' + 'resourceId' + '}', String(resourceId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'locationId' is not null or undefined
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling locationsLocationIdResourcesResourceIdBookingsOptions.');
        }
        // verify required parameter 'resourceId' is not null or undefined
        if (resourceId === null || resourceId === undefined) {
            throw new Error('Required parameter resourceId was null or undefined when calling locationsLocationIdResourcesResourceIdBookingsOptions.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'OPTIONS',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param locationId 
     * @param resourceId 
     */
    public locationsLocationIdResourcesResourceIdOptions (locationId: string, resourceId: string, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/locations/{locationId}/resources/{resourceId}'
            .replace('{' + 'locationId' + '}', String(locationId))
            .replace('{' + 'resourceId' + '}', String(resourceId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'locationId' is not null or undefined
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling locationsLocationIdResourcesResourceIdOptions.');
        }
        // verify required parameter 'resourceId' is not null or undefined
        if (resourceId === null || resourceId === undefined) {
            throw new Error('Required parameter resourceId was null or undefined when calling locationsLocationIdResourcesResourceIdOptions.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'OPTIONS',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     */
    public locationsOptions (extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/locations';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'OPTIONS',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param locationId 
     * @param resource 
     */
    public resourcesCreate (locationId: string, resource: models.Resource, extraHttpRequestParams?: any ) : Observable<models.Resource> {
        const path = this.basePath + '/locations/{locationId}/resources'
            .replace('{' + 'locationId' + '}', String(locationId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'locationId' is not null or undefined
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling resourcesCreate.');
        }
        // verify required parameter 'resource' is not null or undefined
        if (resource === null || resource === undefined) {
            throw new Error('Required parameter resource was null or undefined when calling resourcesCreate.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(resource);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param locationId 
     * @param resourceId 
     */
    public resourcesDelete (locationId: string, resourceId: string, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/locations/{locationId}/resources/{resourceId}'
            .replace('{' + 'locationId' + '}', String(locationId))
            .replace('{' + 'resourceId' + '}', String(resourceId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'locationId' is not null or undefined
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling resourcesDelete.');
        }
        // verify required parameter 'resourceId' is not null or undefined
        if (resourceId === null || resourceId === undefined) {
            throw new Error('Required parameter resourceId was null or undefined when calling resourcesDelete.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param locationId 
     * @param resourceId 
     */
    public resourcesGet (locationId: string, resourceId: string, extraHttpRequestParams?: any ) : Observable<models.Resource> {
        const path = this.basePath + '/locations/{locationId}/resources/{resourceId}'
            .replace('{' + 'locationId' + '}', String(locationId))
            .replace('{' + 'resourceId' + '}', String(resourceId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'locationId' is not null or undefined
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling resourcesGet.');
        }
        // verify required parameter 'resourceId' is not null or undefined
        if (resourceId === null || resourceId === undefined) {
            throw new Error('Required parameter resourceId was null or undefined when calling resourcesGet.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param locationId 
     */
    public resourcesList (locationId: string, extraHttpRequestParams?: any ) : Observable<models.ResourcesListResponse> {
        const path = this.basePath + '/locations/{locationId}/resources'
            .replace('{' + 'locationId' + '}', String(locationId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'locationId' is not null or undefined
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling resourcesList.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param userId 
     * @param bookingId 
     */
    public usersUserIdBookingsBookingIdOptions (userId: string, bookingId: string, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/users/{userId}/bookings/{bookingId}'
            .replace('{' + 'userId' + '}', String(userId))
            .replace('{' + 'bookingId' + '}', String(bookingId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling usersUserIdBookingsBookingIdOptions.');
        }
        // verify required parameter 'bookingId' is not null or undefined
        if (bookingId === null || bookingId === undefined) {
            throw new Error('Required parameter bookingId was null or undefined when calling usersUserIdBookingsBookingIdOptions.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'OPTIONS',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param userId 
     */
    public usersUserIdBookingsOptions (userId: string, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/users/{userId}/bookings'
            .replace('{' + 'userId' + '}', String(userId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling usersUserIdBookingsOptions.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'OPTIONS',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

}
